package com.shop.controller;


import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.shop.dto.BoardDto;
import com.shop.entity.BoardEntity;
import com.shop.member.service.BoardService;

import lombok.RequiredArgsConstructor;

// 의존성주입(DI), 생성자에 의존성을 주입해주는 롬복 어노테이션, 전에는 @Autowired를 통해 필드에 의존성 주입을 받아왔다.
// final이 붙은 필드의 생성자를 자동 생성해준다.
@RequiredArgsConstructor

// 자바 로직 수행
@Controller
@RequestMapping("/board")
public class BoardController {

	private final BoardService boardService;
	
	//게시물 목록
	@GetMapping("/list")
	public String boardList(Model model) {
//		List<BoardDto> boardList = boardService.getBoardList();
//		System.out.println("boardList :      " + boardList);
//		model.addAttribute("list", boardList);
		
		return "board/list";
	}
	
	// 게시물 작성 페이지 이동
	@GetMapping("/write")
	public String writeBoard() {
		return "/board/write";
	}
	
	// 게시물 작성 후 저장
	@PostMapping("/write")
	public String writeBoard(@Valid BoardDto boardDto, BindingResult result) {
		
		// 유효성 검사 걸릴시
		if(result.hasErrors()) {
			return "/board/write";
		}
		
		boardService.saveWrite(boardDto);
		
		
		return "redirect:board/list";
	}
	
	// 게시물 상세보기 페이지
	@GetMapping(value = "/detail/{id}")
    public String itemDetail(Model model, @PathVariable("id") Long boardId) {
//        BoardDto boardFormDto = boardService.getBoardDetail(boardId);
//        model.addAttribute("detail", boardFormDto);
        return "/board/detail";
    }
	
	// 게시물 수정 페이지 이동
	@GetMapping("/update/{id}")
	public String updateBoard() {
		
		return "/board/update";
	}
	
	// 게시물 수정 후 저장
	@PostMapping("/update")
	public String updateBoard(BoardDto boardDto) {
		
		return "redirect:/board/list";
	}
	
	//게시물 삭제
	@PostMapping("/delete/{id}")
	public String deleteBoard(@RequestParam List<String> boardIds) {
//		
//		for(int i=0; i<boardIds.size(); i++) {
//			Long id = Long.valueOf(boardIds.get(i));
//			boardService.deleteBoard(id);
//		}
//		
		return "redirect:/board/list";
	}
}
